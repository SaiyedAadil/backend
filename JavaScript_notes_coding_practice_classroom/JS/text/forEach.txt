q:
    . what is forEach? which is essentially a loop
    . how does forEach work
        . executed on each iteration 
    . what is callback function in forEach loop?
        . a-notes:
            . parameters will be:
                . 1 for value (element selected)
                . 2 index

Notes:
    . A suitable title for these notes could be:

"Exploring forEach and Callback Functions in JavaScript"

This title reflects:
1. forEach loop: How `forEach` iterates over array elements, passing each element and its index to a callback function.
2. Callback function: Explanation of how a callback function works, with an example that adds the array element to its index.
3. Understanding forEach behavior: `forEach` performs operations but does not return a value, and therefore cannot be stored in a variable (it returns `undefined`).

Would you like to expand on the role of callbacks or the use of `forEach` in different scenarios?

--------------------------------------------------

----------------------------  Notes 2 with code:  ------------------------------

    ### Breakdown of Your Notes on Callback Functions and `forEach`

#### Understanding `forEach`

1. Function Definition:
   ```javascript
   function callBackFn(ele, index) {
       console.log(ele + index);
   }
   ```
   - This function takes two parameters: `ele` (the current element in the array) and `index` (the position of that element). It logs the sum of `ele` and `index`.

2. Using `forEach`:
   ```javascript
   var marks = [65, 66, 78, 94, 45]; // Example array
   var a = marks.forEach(callBackFn);
   console.log(a); // Outputs: undefined
   ```
   - The `forEach` method executes the `callBackFn` for each element in the `marks` array. However, `forEach` does not return a new array or any value; it returns `undefined`, which is why logging `a` shows `undefined`.

#### Example Usage

- If you call `callBackFn` directly:
   ```javascript
   callBackFn(20, 2); // Outputs: 22
   ```
   - This directly invokes the function with `20` as the element and `2` as the index, producing the output `22`.

### Key Points

1. `forEach` Method:
   - Used for iterating over arrays.
   - It executes a provided function once for each array element.
   - It doesnâ€™t return a value (returns `undefined`), making it suitable for side effects like logging or modifying external state.

2. Callback Function:
   - A function passed to another function (in this case, `callBackFn` is passed to `forEach`).
   - Useful for defining how to handle each element of the array.

### Summary

    - Your notes cover the basics of using `forEach` in conjunction with callback functions in JavaScript. Understanding how `forEach` operates and its behavior regarding return values is essential for effective array manipulation. If you have more questions or want to explore this further, feel free to ask!


